var http = require('http'),
    fs = require('fs'),
    path = require('path'),
    async = require('async'),
    q = require('q'),
    colors = require('colors');

module.exports = slidevs;

// Create slidev
function slidevs(inputSettings) {

    settings = {
        name: inputSettings.name.toLowerCase().replace(' ', '-') || 'slidevs-presentation',
        layout: inputSettings.layout.toLowerCase().replace('.html', '') + '.html' || 'layout.html',
        slidesFolder: inputSettings.slidesFolder.toLowerCase().replace(' ', '') || '/slides',
        notes: inputSettings.notes || false,
        port: inputSettings.port || 5000
    };

    return {
        name: function() {
            return settings.name;
        }(),
        layout: function() {
            return settings.layout;
        }(),
        slidesFolder: function() {
            return settings.slidesFolder;
        }(),
        notes: function() {
            return settings.notes;
        }(),
        port: function() {
            return settings.port;
        }(),
        start: function() {
            startSlidevs(this);
        }
    };

}

// Start slidevs
function startSlidevs(slidevs) {

    async.waterfall([
        function(callback) {
            buildSlidevs(slidevs, callback);
        },
        function(slidevs, built, buildError, callback) {
            createSlidevsServer(slidevs, built, buildError, callback);
        }
    ], function(err, finalSlidev, startError) {
        if(err || startError) {
            if(err) showError('async', err);
            if(startError) showError('the start', startError);
        } else {
            console.log('\n\nSLIDEVS'.yellow + ' ######################################################\n'.grey);
            console.log('Your slidev \''.green + finalSlidev.name.green  + '\' has been created!'.green);
            console.log('Slides:'.bold , finalSlidev.slides.cyan);
            console.log('Controls:'.bold , finalSlidev.controls.cyan);
            console.log('\n#########################################################\n\n'.grey);
        }
    });

}

// Manage hidden presentation folder
function checkSlidevsFolder() {

    var defer = q.defer();

    var slidevsFolder = path.dirname(module.parent.filename) + '/.slidevs';
    fs.exists(slidevsFolder, function(exists) {
        if(exists) {
            fs.readdir(slidevsFolder, function(err, files) {
                if(err) defer.resolve(false, 'reading the hidden slidevs folder', err);
                if(files.length > 0) {
                    files.forEach(function(file, index) {
                        fs.unlink(slidevsFolder + '/' + file, function(err) {
                            if(err) defer.resolve(false, 'cleaning hidden slidevs folder', err);
                        });
                        if(files.length === (index + 1)) defer.resolve(true);
                    });
                } else defer.resolve(true);
            });
        } else {
            fs.mkdir(slidevsFolder, [], function(err) {
                if(err) defer.resolve(false, 'creating hidden slidevs folder', err);
                else defer.resolve(true);
            });
        }
    });

    return defer.promise;

}

// Build slidevs
function buildSlidevs(slidevs, callback) {

    checkSlidevsFolder().then(function(done, error, errorMessage) {
        if(!done) showError(error, errorMessage);
        else {

            callback(null, slidevs, true, null);

        }
    });

    // If something went wrong:
    // callback(null, null, false, 'Build error');

}

// Create server
function createSlidevsServer(slidevs, built, startError, callback) {

    if(!built) callback(null, false, startError);
    else {

        var uri = {
                slides: '/' + slidevs.name,
                controls: '/' + slidevs.name + '/controls'
            };

        var finalSlidev = {
            name: slidevs.name,
            slides: 'http://localhost:3000' + uri.slides,
            controls: 'http://localhost:3000' + uri.controls
        };

        callback(null, finalSlidev, null);

        // If something went wrong:
        // callback(null, null, 'Server error');

    }

}

// Global error function
function showError(location, message) {
    console.log('\n\n######################## SLIDEVS ########################\n'.grey);
    console.log('Something went wrong during '.red + location.red + ':\n'.red + message);
    console.log('\n#########################################################\n\n'.grey);
}